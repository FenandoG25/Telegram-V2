{"version":3,"sources":["firebase.js","base/Login.js","features/counter/threadSlice.js","base/BarraDer.js","features/counter/userSlice.js","base/BarraIzq.js","base/Mensajes.js","base/Caja.js","base/Telegram.js","App.js","app/store.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Login","className","src","alt","Button","onClick","signInWithPopup","catch","err","alert","message","threadSlice","createSlice","name","initialState","threadId","threadName","reducers","setThread","state","action","payload","actions","selectThreadId","thread","selectThreadName","BarraDer","id","dispatch","useDispatch","useState","threadInfo","setThreadInfo","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Avatar","photo","Date","timestamp","toDate","toLocaleString","userSlice","value","login","user","logout","selectUser","BarraIzq","useSelector","mensajes","setThreads","placeholder","IconButton","variant","prompt","add","signOut","Mensajes","forwardRef","ref","displayName","email","uid","Caja","input","setInput","messages","setMessages","timeago","type","onChange","e","target","preventDefault","FieldValue","serverTimestamp","Telegram","App","onAuthStateChanged","authUser","photoURL","console","log","configureStore","reducer","userReducer","threadReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.a1ef13a7.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCDcjRBnEIPND-NOTweGpORfaZBjdPdK4I\",\n  authDomain: \"telegram-clone-e9f24.firebaseapp.com\",\n  projectId: \"telegram-clone-e9f24\",\n  storageBucket: \"telegram-clone-e9f24.appspot.com\",\n  messagingSenderId: \"54792597912\",\n  appId: \"1:54792597912:web:38ebdf64c07d9db3bc3bed\",\n  measurementId: \"G-Y5DMDE7TW8\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db = firebaseApp.firestore()\n  const auth = firebase.auth();\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  export { auth, provider};\n  export default db;","import { Button } from '@material-ui/core'\nimport React from 'react'\nimport { auth, provider} from '../firebase';\nimport './Login.css'\n\nconst Login = () => {\n    const signIn = () =>{\n        auth.signInWithPopup(provider).catch((err) =>{\n            alert(err.message)\n        })\n    }\n    return (\n        <div className = \"login\">\n            <div className = \"login__telegram\">\n                <img\n                    src = \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Telegram_2019_Logo.svg/100px-Telegram_2019_Logo.svg.png\"\n                    alt = \"telgram logo\"\n                />\n                <h1>Telegram Clone</h1>\n                <Button className = \"login__button\" onClick = {signIn} >Iniciar sesion</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Login","import { createSlice } from '@reduxjs/toolkit';\n\nexport const threadSlice = createSlice({\n  name: 'thread',\n  initialState: {\n    threadId: null,\n    threadName: null\n  },\n  reducers: {\n    setThread: (state,action) => {\n      state.threadId = action.payload.threadId;\n      state.threadName = action.payload.threadName\n    }\n  },\n});\n\nexport const { setThread } = threadSlice.actions;\n\nexport const selectThreadId = state => state.thread.threadId\n\nexport const selectThreadName = state => state.thread.threadName;\n\nexport default threadSlice.reducer;","import { Avatar } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport './BarraDer.css'\nimport db from '../firebase'\nimport { setThread } from '../features/counter/threadSlice'\n\nconst BarraDer = ({ id, threadName}) => {\n\n    const dispatch = useDispatch();\n    const [threadInfo, setThreadInfo] = useState([])\n\n    useEffect(() => {\n        db.collection('mensajes')\n            .doc(id)\n            .collection('messages')\n            .orderBy(\"timestamp\", \"desc\")\n            .onSnapshot((snapshot) =>\n                setThreadInfo(snapshot.docs.map((doc) => doc.data()))\n            )\n    },[id])\n\n    return (\n        <div\n            className = \"sidebarThread\"\n            onClick = {() =>\n                dispatch(setThread({\n                    threadId: id,\n                    threadName: threadName\n                }))\n            }\n        >\n            <Avatar\n                src = {threadInfo[0]?.photo}\n            />\n            <div className = \"sidebarThread__details\">\n                <h3>{threadName}</h3>\n                <p>{threadInfo[0]?.message}</p>\n        <small className = \"sidebarThread__timestamp\">{new Date(threadInfo[0]?.timestamp?.toDate()).toLocaleString()}</small>\n            </div>\n        </div>\n    )\n}\n\nexport default BarraDer\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    login: (state,action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = state => state.user.user;\n\nexport default userSlice.reducer;","import React, {useEffect, useState} from 'react'\nimport './BarraIzq.css'\nimport SearchIcon from '@material-ui/icons/Search'\nimport BorderColorOutlinedIcon from '@material-ui/icons/BorderColorOutlined'\nimport { Avatar, IconButton } from '@material-ui/core'\nimport BarraDer from './BarraDer'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport db, { auth } from '../firebase'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../features/counter/userSlice'\n\nconst BarraIzq = () => {\n\n    const user = useSelector(selectUser)\n    const[mensajes, setThreads] = useState([]);\n\n    useEffect(() =>{\n        db.collection('mensajes').onSnapshot((snapshot) =>\n            setThreads(snapshot.docs.map((doc) =>({\n                id: doc.id,\n                data: doc.data()\n            })))\n        )\n    }, [])\n\n    const addThread = () =>{\n        const threadName = prompt('Crear un nuevo chat')\n        db.collection('mensajes').add({\n            threadName: threadName,\n        })\n    }\n\n    return (\n        <div className = \"sidebar\">\n            <div className = \"sidebar__header\">\n                <div className = \"sidebar__search\">\n                    <SearchIcon className = \"sidebar__searchIcon\" />\n                    <input placeholder = \"Buscar\" className = \"sidebar__input\"/>\n                </div>\n                <IconButton variant = \"outlined\" id = \"sidebar__button\">\n                    <BorderColorOutlinedIcon onClick = {addThread}/>\n                </IconButton>\n            </div>\n            <div className = \"sidebar__threads\">\n                { mensajes.map(({id, data: {threadName}}) => (\n                    <BarraDer\n                        key = {id}\n                        id = {id}\n                        threadName = {threadName}\n                    />\n                ))}\n            </div>\n            <div className = \"sidebar__bottom\">\n                <Avatar\n                    src = {user.photo}\n                    className = \"sidebar__bottom_avatar\"\n                    onClick = {() => auth.signOut()}\n                />\n                <IconButton>\n                    <SettingsIcon />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default BarraIzq\n","import { Avatar } from '@material-ui/core'\nimport React, { forwardRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../features/counter/userSlice'\nimport './Mensajes.css'\n\nconst Mensajes = forwardRef(({\n    id, data: {\n            timestamp,\n            displayName,\n            email,\n            message,\n            photo,\n            uid\n    }\n}, ref) => {\n\n    const user = useSelector(selectUser)\n\n    return (\n        <div ref = {ref} className = {`message ${user.email === email && `message__sender`}`}\n            >\n                <Avatar\n                    src = {photo}\n                    className = \"message__photo\"\n                />\n                <div className = \"message__contents\">\n                <p className = \"message__content1\">{displayName}</p>\n                    <p className = \"message__content\">{message}</p>\n                    <small className = \"message__timestamp\">{new Date(timestamp?.toDate()).toLocaleString('es-US')}</small>\n                </div>\n        </div>\n    )\n})\n\nexport default Mensajes\n","import { Avatar, IconButton } from '@material-ui/core'\nimport  MoreHorizIcon from '@material-ui/icons/MoreHoriz'\nimport React, { useEffect, useState } from 'react'\nimport './Caja.css'\nimport SendRoundedIcon from '@material-ui/icons/SendRounded'\nimport  MicNoneOutlinedIcon from '@material-ui/icons/MicNoneOutlined'\nimport db from '../firebase'\nimport firebase from 'firebase'\nimport { useSelector } from 'react-redux'\nimport { selectThreadId, selectThreadName } from '../features/counter/threadSlice'\nimport { selectUser } from '../features/counter/userSlice'\nimport Message from './Mensajes'\nimport * as timeago from 'timeago.js'\nimport FlipMove from 'react-flip-move'\n\nconst Caja = () => {\n\n    const[input, setInput] = useState('');\n    const [messages, setMessages] = useState([]);\n    const threadName = useSelector(selectThreadName)\n    const threadId = useSelector(selectThreadId)\n    const user = useSelector(selectUser)\n\n    useEffect(() =>{\n        if(threadId){\n            db\n            .collection('mensajes')\n            .doc(threadId)\n            .collection('messages')\n            .orderBy(\"timestamp\", \"desc\")\n            .onSnapshot((snapshot) =>\n            setMessages(snapshot.docs.map((doc) =>({\n                id : doc.id,\n                data: doc.data()\n        }))))\n        }\n    },[threadId])\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n\n            db\n            .collection('mensajes')\n            .doc(threadId)\n            .collection('messages')\n            .add({\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            message: input,\n            uid: user.uid,\n            photo: user.photo,\n            email: user.email,\n            displayName: user.displayName\n        })\n\n        setInput('')\n        //console.log(messages)\n    }\n\n    return (\n        <div className = \"thread\">\n            <div className = \"thread__header\">\n                <div className = \"thread__headerDetails\">\n                    {threadId ? (<Avatar\n                        src = {user.photo}\n                    />) : (<Avatar />)}\n                    <div className = \"thread__headerDetails_info\">\n                        <h4>{ threadId ? threadName : \"Haga clic en cualquier nombre de chat\"}</h4>\n    <h5>{ threadId ? (timeago.format(messages[0]?.timestamp?.toDate().toLocaleString('es-US'))) : \"Ultima vez visto\"}</h5>\n                    </div>\n                </div>\n                <IconButton>\n                    <MoreHorizIcon className = \"thread__headerMoreHoriz\"/>\n                </IconButton>\n            </div>\n                <div className = \"thread__messages\">\n                    <FlipMove>\n                        { messages.map(({ id, data }) =>(\n                        <Message key = {id} id = {id} data = {data} />\n                    ))}\n                    </FlipMove>\n                </div>\n                <div className = \"thread__input\">\n                    <form>\n                    <input\n                        placeholder = \"Mensaje....\"\n                        type = \"text\"\n                        value = {input}\n                        onChange = {(e) => setInput(e.target.value)}\n                    />\n                    <IconButton\n                        onClick = {sendMessage} type = \"sumbit\">\n                            <SendRoundedIcon />\n                    </IconButton>\n                    <IconButton>\n                            <MicNoneOutlinedIcon />\n                        </IconButton>\n                    </form>\n                </div>\n        </div>\n    )\n}\n\nexport default Caja\n","import React from 'react'\nimport BarraIzq from './BarraIzq'\nimport './Telegram.css'\nimport Caja from './Caja'\n\nfunction Telegram() {\n    return (\n        <div className = \"telegram\">\n            <BarraIzq />\n            <Caja />\n        </div>\n    )\n}\n\nexport default Telegram\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport Login from './base/Login';\nimport Telegram from './base/Telegram';\nimport { login, logout, selectUser } from './features/counter/userSlice';\nimport {auth} from './firebase'\n\nfunction App() {\n\n  const user = useSelector(selectUser)\n  const dispatch = useDispatch();\n\n  useEffect(() =>{\n    auth.onAuthStateChanged((authUser) =>{\n      if(authUser){\n        dispatch(login({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          displayName: authUser.displayName,\n          email: authUser.email\n        }))\n      } else {\n        dispatch(logout())\n      }\n      console.log(authUser)\n    })\n  },[dispatch])\n\n  return (\n    <div className=\"App\">\n      {user ? <Telegram /> : <Login />}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/counter/userSlice';\nimport threadReducer from '../features/counter/threadSlice'\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n    thread: threadReducer\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}